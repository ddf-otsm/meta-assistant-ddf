name: CD

on:
  push:
    branches: [ dev, main ]

jobs:
  deploy-dev:
    name: Deploy to Development
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build:dev
      env:
        NODE_ENV: development
        API_URL: ${{ secrets.DEV_API_URL }}
        DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}

    - name: Deploy to Development Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_SERVER_HOST }}
        username: ${{ secrets.DEV_SERVER_USER }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_SERVER_PORT }}
        script: |
          cd /var/www/dev-app
          rm -rf dist/*
          mkdir -p dist

    - name: Copy Build Files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DEV_SERVER_HOST }}
        username: ${{ secrets.DEV_SERVER_USER }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_SERVER_PORT }}
        source: "dist/*"
        target: "/var/www/dev-app"
        strip_components: 1

    - name: Start Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_SERVER_HOST }}
        username: ${{ secrets.DEV_SERVER_USER }}
        key: ${{ secrets.DEV_SSH_KEY }}
        port: ${{ secrets.DEV_SERVER_PORT }}
        script: |
          cd /var/www/dev-app
          pm2 reload dev-app || pm2 start npm --name "dev-app" -- start

    - name: Health Check
      uses: jtalk/url-health-check-action@v3
      with:
        url: ${{ secrets.DEV_HEALTH_CHECK_URL }}
        max-attempts: 3
        retry-delay: 5s

    - name: Notify Slack on Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: workflow,job,commit,repo,ref,author,took
        custom_payload: |
          {
            "attachments": [{
              "color": "good",
              "text": ":white_check_mark: Development deployment successful!\nEnvironment: Development\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}"
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: workflow,job,commit,repo,ref,author,took
        custom_payload: |
          {
            "attachments": [{
              "color": "danger",
              "text": ":x: Development deployment failed!\nEnvironment: Development\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}"
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-prod:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.deployment_url }}
    needs: [deploy-dev]  # Requires successful dev deployment first

    steps:
    - name: Require Manual Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.token }}
        approvers: ddf-otsm
        minimum-approvals: 1
        issue-title: "Deploy to Production"
        issue-body: "Please approve or deny the deployment to production"
        exclude-workflow-initiator-as-approver: false
        timeout-minutes: 30

    # Similar deployment steps as dev, but with production configs
    # ... (production deployment steps would go here) 