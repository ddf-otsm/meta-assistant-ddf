#!/usr/bin/env node

/**
 * Config Sync - Synchronize configuration across different files in the project
 * 
 * This script reads the main configuration file (config/config.yaml) and updates
 * derived configuration files like .env and .replit to maintain consistency.
 */

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

// Paths are relative to project root
const CONFIG_YAML_PATH = 'config/config.yaml';
const ENV_FILE_PATH = '.env';
const REPLIT_FILE_PATH = '.replit';

// Load YAML config file
function loadYamlConfig() {
  try {
    const configPath = path.resolve(process.cwd(), CONFIG_YAML_PATH);
    if (!fs.existsSync(configPath)) {
      console.error(`Config file not found: ${configPath}`);
      return null;
    }
    
    const fileContents = fs.readFileSync(configPath, 'utf8');
    return yaml.load(fileContents);
  } catch (error) {
    console.error(`Error loading YAML config: ${error.message}`);
    return null;
  }
}

// Update .env file with values from config
function updateEnvFile(config) {
  try {
    const envPath = path.resolve(process.cwd(), ENV_FILE_PATH);
    let envContent = '';
    
    // Create or read existing .env file
    if (fs.existsSync(envPath)) {
      envContent = fs.readFileSync(envPath, 'utf8');
    }
    
    // Parse existing .env entries
    const envEntries = {};
    const envLines = envContent.split('\n').filter(line => line.trim() && !line.startsWith('#'));
    
    envLines.forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        envEntries[key.trim()] = valueParts.join('=').trim();
      }
    });
    
    // Update entries with config values
    if (config.server) {
      envEntries['PORT'] = config.server.port;
      envEntries['NODE_ENV'] = config.server.environment;
    }
    
    if (config.database) {
      envEntries['DATABASE_URL'] = config.database.url;
    }
    
    if (config.api_keys) {
      if (config.api_keys.openai) {
        envEntries['OPENAI_API_KEY'] = config.api_keys.openai;
      }
      if (config.api_keys.azure_openai) {
        envEntries['AZURE_OPENAI_KEY'] = config.api_keys.azure_openai;
      }
    }
    
    if (config.azure) {
      if (config.azure.subscription_id) {
        envEntries['AZURE_SUBSCRIPTION_ID'] = config.azure.subscription_id;
      }
      if (config.azure.tenant_id) {
        envEntries['AZURE_TENANT_ID'] = config.azure.tenant_id;
      }
      if (config.azure.client_id) {
        envEntries['AZURE_CLIENT_ID'] = config.azure.client_id;
      }
      if (config.azure.client_secret) {
        envEntries['AZURE_CLIENT_SECRET'] = config.azure.client_secret;
      }
      
      if (config.azure.openai) {
        if (config.azure.openai.endpoint) {
          envEntries['AZURE_OPENAI_ENDPOINT'] = config.azure.openai.endpoint;
        }
        if (config.azure.openai.key) {
          envEntries['AZURE_OPENAI_KEY'] = config.azure.openai.key;
        }
        if (config.azure.openai.api_version) {
          envEntries['AZURE_OPENAI_API_VERSION'] = config.azure.openai.api_version;
        }
        if (config.azure.openai.deployment_name) {
          envEntries['AZURE_OPENAI_DEPLOYMENT_NAME'] = config.azure.openai.deployment_name;
        }
      }
    }
    
    // Generate new .env content
    let newEnvContent = '# Environment variables - auto-generated by config_sync.js\n';
    newEnvContent += '# Last updated: ' + new Date().toISOString() + '\n\n';
    
    // Add Database section
    newEnvContent += '# Database Configuration\n';
    if (envEntries['DATABASE_URL']) {
      newEnvContent += `DATABASE_URL=${envEntries['DATABASE_URL']}\n\n`;
    }
    
    // Add Server section
    newEnvContent += '# Server Configuration\n';
    if (envEntries['PORT']) {
      newEnvContent += `PORT=${envEntries['PORT']}\n`;
    }
    if (envEntries['NODE_ENV']) {
      newEnvContent += `NODE_ENV=${envEntries['NODE_ENV']}\n\n`;
    }
    
    // Add API Keys section
    newEnvContent += '# API Keys\n';
    if (envEntries['OPENAI_API_KEY']) {
      newEnvContent += `OPENAI_API_KEY=${envEntries['OPENAI_API_KEY']}\n\n`;
    }
    
    // Add Azure section
    newEnvContent += '# Azure Configuration\n';
    if (envEntries['AZURE_SUBSCRIPTION_ID']) {
      newEnvContent += `AZURE_SUBSCRIPTION_ID=${envEntries['AZURE_SUBSCRIPTION_ID']}\n`;
    }
    if (envEntries['AZURE_TENANT_ID']) {
      newEnvContent += `AZURE_TENANT_ID=${envEntries['AZURE_TENANT_ID']}\n`;
    }
    if (envEntries['AZURE_CLIENT_ID']) {
      newEnvContent += `AZURE_CLIENT_ID=${envEntries['AZURE_CLIENT_ID']}\n`;
    }
    if (envEntries['AZURE_CLIENT_SECRET']) {
      newEnvContent += `AZURE_CLIENT_SECRET=${envEntries['AZURE_CLIENT_SECRET']}\n\n`;
    }
    
    // Add Azure OpenAI section
    newEnvContent += '# Azure OpenAI Configuration\n';
    if (envEntries['AZURE_OPENAI_ENDPOINT']) {
      newEnvContent += `AZURE_OPENAI_ENDPOINT=${envEntries['AZURE_OPENAI_ENDPOINT']}\n`;
    }
    if (envEntries['AZURE_OPENAI_KEY']) {
      newEnvContent += `AZURE_OPENAI_KEY=${envEntries['AZURE_OPENAI_KEY']}\n`;
    }
    if (envEntries['AZURE_OPENAI_API_VERSION']) {
      newEnvContent += `AZURE_OPENAI_API_VERSION=${envEntries['AZURE_OPENAI_API_VERSION']}\n`;
    }
    if (envEntries['AZURE_OPENAI_DEPLOYMENT_NAME']) {
      newEnvContent += `AZURE_OPENAI_DEPLOYMENT_NAME=${envEntries['AZURE_OPENAI_DEPLOYMENT_NAME']}\n`;
    }
    
    // Write the updated .env file
    fs.writeFileSync(envPath, newEnvContent);
    console.log(`.env file updated: ${envPath}`);
    
    return true;
  } catch (error) {
    console.error(`Error updating .env file: ${error.message}`);
    return false;
  }
}

// Main function
function main() {
  console.log('Starting config sync...');
  
  // Load the config YAML
  const config = loadYamlConfig();
  if (!config) {
    process.exit(1);
  }
  
  // Update .env file
  const envUpdated = updateEnvFile(config);
  
  if (envUpdated) {
    console.log('Config sync completed successfully.');
  } else {
    console.error('Config sync failed.');
    process.exit(1);
  }
}

// Run the script
main(); 